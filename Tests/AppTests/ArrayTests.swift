import Foundation
@testable import App
import XCTest


final class ArrayTests: XCTestCase {
    func testTranspose() {
        let spatial = Array2DFastSpace(data: [1,2,3,4,5,6], nLocations: 2, nTime: 3)
        let temporal = spatial.transpose()
        XCTAssertEqual(temporal.data, [1, 3, 5, 2, 4, 6])
        let spatial2 = temporal.transpose()
        XCTAssertEqual(spatial2.data, spatial.data)
    }
    
    func testDeaccumulate() {
        var data = Array2DFastTime(data: [1,2,3,1,2,3], nLocations: 1, nTime: 6)
        data.deaccumulateOverTime(slidingWidth: 3, slidingOffset: 0)
        XCTAssertEqual(data.data, [1, 1, 1, 1, 1, 1])
        
        var data2 = Array2DFastTime(data: [.nan,1,2,1,2,3], nLocations: 1, nTime: 6)
        data2.deaccumulateOverTime(slidingWidth: 3, slidingOffset: 0)
        XCTAssertTrue(data2.data[0].isNaN)
        XCTAssertEqual(data2.data[1..<6], [1, 1, 1, 1, 1])
        
        var data3 = Array2DFastTime(data: [.nan,1,2,3,1,2,3], nLocations: 1, nTime: 7)
        data3.deaccumulateOverTime(slidingWidth: 3, slidingOffset: 1)
        XCTAssertTrue(data3.data[0].isNaN)
        XCTAssertEqual(data3.data[1..<7], [1, 1, 1, 1, 1, 1])
    }
    
    func testSolarInterpolationFrom3h() {
        var data = Array2DFastTime(data: [.nan, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3125, 11.9375, 57.484375, 75.203125, 81.625, 56.3125, 69.359375, 100.671875, 320.9375, 400.78125, 373.76562, 246.95312, 53.632812, 29.242188, 2.578125, -0.109375, 0.0, 0.0625, 0.0859375, -0.0859375, 0.0234375, -0.0859375, 0.140625, -0.03125, 0.2421875, 4.2109375, 3.515625, 8.65625, 14.0, 4.015625, 18.257812, 0.3359375, 4.0, 1.90625, 0.796875, 1.09375, 3.59375, 0.578125, -0.046875, 0.140625, 0.1015625, -0.1953125, -0.015625, -0.109375, 0.2890625, -0.0078125, -0.234375, 0.03125, 2.96875, 27.578125, 98.99219, 126.14844, 183.63281, 261.22656, 319.10156, 409.4922, 386.6797, 374.72656, 353.08594, 311.9453, 132.4375, 70.46875, 8.3828125, -0.0703125, 0.0703125, -0.2578125, 0.0546875, -0.1171875, 0.3671875, -0.2421875, -0.203125, 0.515625, .nan, .nan, 15.9765625, .nan, .nan, 175.58594, .nan, .nan, 411.35938, .nan, .nan, 272.71875, .nan, .nan, 40.820312, .nan, .nan, -0.0234375, .nan, .nan, -0.0859375, .nan, .nan, 0.0546875, .nan, .nan, 0.640625, .nan, .nan, 3.078125, .nan, .nan, 0.875, .nan, .nan, 1.484375, .nan, .nan, 0.0078125, .nan, .nan, -0.0546875, .nan, .nan, 0.140625, .nan, .nan, -0.0625, .nan, .nan, 1.9609375, .nan, .nan, 181.02344, .nan, .nan, 152.05469, .nan, .nan, 40.648438, .nan, .nan, 6.5390625, .nan, .nan, -0.0546875, .nan, .nan, -0.015625, .nan, .nan, 0.1875, .nan, .nan, 20.078125, .nan, .nan, 317.53125, .nan, .nan, 381.72656, .nan, .nan, 250.71094, .nan, .nan, 53.742188, .nan, .nan, -0.3359375, .nan, .nan, 0.171875, .nan, .nan, -0.0625, .nan, .nan, 43.609375, .nan, .nan, 191.8125], nLocations: 1, nTime: 181)
        let run = Timestamp(2022,08,16)
        let interpolationPositions = [79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178]
        
        // this location is exactly at a point where sofac is diverging to 0 on the first step to interpolate
        let coords = IconDomains.icon.grid.getCoordinates(gridpoint: 1256 + 2879 * 1132)
        data.interpolate2StepsSolarBackwards(positions: interpolationPositions, grid: RegularGrid(nx: 1, ny: 1, latMin: coords.lat, lonMin: coords.lon, dx: 1, dy: 1), run: run, dtSeconds: 3600)
        
        //print(data.data[79..<181])
        // first values should be very low
        XCTAssertEqual(data.data[79..<181], [4.4795294, 8.949175, 23.73752, 57.592884, 111.1817, 195.30493, 271.5203, 342.15094, 387.44656, 352.28162, 281.04526, 194.60515, 108.3657, 21.6289, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.1640625, 1.254039, 1.5988137, 0.95585746, 1.3412719, 2.4155912, 3.425379, 2.953608, 1.8413166, 0.8236163, 0.9238502, 1.1799643, 1.0543017, 0.45095232, 0.043920845, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.1875, -2.463401, -6.160411, 2.9385011, 45.368336, 120.388306, 201.53833, 213.1029, 189.13487, 143.03423, 102.203995, 60.926666, 28.734081, 14.592384, 2.7396476, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.6383472, 3.7433002, 30.220024, 102.02486, 218.87083, 353.68085, 396.21503, 390.51782, 358.84955, 309.55386, 242.68475, 176.36276, 108.857574, 20.28444, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 4.7367635, 24.459213, 65.93245, 112.12562, 164.01543, 213.74992])
    }
    
    func testSolarInterpolationFrom3h2() {
        var data = Array2DFastTime(data: [.nan, 0.0, 0.0, 0.0, 0.0, 0.0, 5.4375, 100.109375, 287.32812, 495.59375, 545.4375, 751.3125, 821.90625, 577.8281, 194.17188, 215.09375, 202.40625, 188.3125, 71.328125, 1.4609375, 0.0859375, -0.0703125, 0.0078125, 0.1171875, -0.0546875, 0.0, -0.03125, -0.0390625, -0.0546875, 0.15625, 5.359375, 102.27344, 260.52344, 448.58594, 575.8047, 723.59375, 851.8594, 809.2578, 526.5703, 562.9844, 351.28125, 206.34375, 59.25, 1.2109375, -0.1171875, -0.0859375, 0.2890625, -0.125, 0.046875, 0.0390625, -0.2109375, 0.03125, -0.046875, 0.3203125, 5.3515625, 106.88281, 292.1953, 483.57812, 653.1094, 776.47656, 842.02344, 569.60156, 380.58594, 393.5078, 267.3047, 227.35938, 63.3125, 1.2109375, 0.3046875, 0.1953125, -0.1796875, -0.296875, 0.40625, -0.3203125, 0.3203125, 0.046875, -0.015625, -0.46875, 5.359375, .nan, .nan, 305.71875, .nan, .nan, 775.6719, .nan, .nan, 578.2344, .nan, .nan, 251.5625, .nan, .nan, 0.4140625, .nan, .nan, 0.0703125, .nan, .nan, 0.0546875, .nan, .nan, 1.3046875, .nan, .nan, 293.9375, .nan, .nan, 758.1094, .nan, .nan, 482.66406, .nan, .nan, 253.94531, .nan, .nan, -0.0390625, .nan, .nan, 0.0859375, .nan, .nan, 0.140625, .nan, .nan, 1.671875, .nan, .nan, 302.71875, .nan, .nan, 708.65625, .nan, .nan, 658.5703, .nan, .nan, 183.88281, .nan, .nan, 0.09375, .nan, .nan, 0.078125, .nan, .nan, -0.09375, .nan, .nan, 1.46875, .nan, .nan, 294.125, .nan, .nan, 760.5, .nan, .nan, 743.46875, .nan, .nan, 258.53125, .nan, .nan, 0.3671875, .nan, .nan, 0.1953125, .nan, .nan, -0.421875, .nan, .nan, 1.625, .nan, .nan, 302.41406, .nan, .nan, 776.85156], nLocations: 1, nTime: 181)
        let run = Timestamp(2022,08,16)
        let interpolationPositions = [79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178]
        
        // this position goes haywire if the time is wrong
        let coords = IconDomains.icon.grid.getCoordinates(gridpoint: 1460 + 2879 * 939)
        print(coords)
        data.interpolate2StepsSolarBackwards(positions: interpolationPositions, grid: RegularGrid(nx: 1, ny: 1, latMin: coords.lat, lonMin: coords.lon, dx: 1, dy: 1), run: run, dtSeconds: 3600)
        
        print(data.data[79..<181])
        // first value should be less than 123 watts
        XCTAssertEqual(data.data[79..<181], [59.939037, 184.86816, 386.76907, 551.15594, 694.08936, 786.91974, 733.7085, 602.8922, 464.84366, 358.30127, 196.84364, 14.24481, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.76609105, 3.4337656, 54.7326, 175.19531, 372.04474, 536.8096, 683.1782, 768.94214, 688.6425, 529.41565, 387.48566, 314.93307, 183.6712, 12.953841, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.68310994, 4.4120827, 58.80976, 185.05853, 383.3455, 526.53687, 637.44006, 718.6313, 713.7283, 645.004, 527.9774, 373.7449, 179.43303, 10.039833, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.6811939, 3.8865447, 55.402103, 175.84189, 372.64386, 528.06213, 661.07135, 771.04193, 779.09296, 715.0653, 595.21436, 425.1246, 203.93396, 10.555917, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.65095794, 4.311508, 57.518074, 181.47418, 383.3324, 547.0596, 689.1922, 787.452])
    }
}
