import Foundation
@testable import App
import XCTest


final class ArrayTests: XCTestCase {
    func testTranspose() {
        let spatial = Array2DFastSpace(data: [1,2,3,4,5,6], nLocations: 2, nTime: 3)
        let temporal = spatial.transpose()
        XCTAssertEqual(temporal.data, [1, 3, 5, 2, 4, 6])
        let spatial2 = temporal.transpose()
        XCTAssertEqual(spatial2.data, spatial.data)
    }
    
    func testDeaccumulate() {
        var data = Array2DFastTime(data: [1,2,3,1,2,3], nLocations: 1, nTime: 6)
        data.deaccumulateOverTime(slidingWidth: 3, slidingOffset: 0)
        XCTAssertEqual(data.data, [1, 1, 1, 1, 1, 1])
        
        var data2 = Array2DFastTime(data: [.nan,1,2,1,2,3], nLocations: 1, nTime: 6)
        data2.deaccumulateOverTime(slidingWidth: 3, slidingOffset: 0)
        XCTAssertTrue(data2.data[0].isNaN)
        XCTAssertEqual(data2.data[1..<6], [1, 1, 1, 1, 1])
        
        var data3 = Array2DFastTime(data: [.nan,1,2,3,1,2,3], nLocations: 1, nTime: 7)
        data3.deaccumulateOverTime(slidingWidth: 3, slidingOffset: 1)
        XCTAssertTrue(data3.data[0].isNaN)
        XCTAssertEqual(data3.data[1..<7], [1, 1, 1, 1, 1, 1])
    }
    
    func testSolarInterpolationFrom3h() {
        var data = Array2DFastTime(data: [.nan, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3125, 11.9375, 57.484375, 75.203125, 81.625, 56.3125, 69.359375, 100.671875, 320.9375, 400.78125, 373.76562, 246.95312, 53.632812, 29.242188, 2.578125, -0.109375, 0.0, 0.0625, 0.0859375, -0.0859375, 0.0234375, -0.0859375, 0.140625, -0.03125, 0.2421875, 4.2109375, 3.515625, 8.65625, 14.0, 4.015625, 18.257812, 0.3359375, 4.0, 1.90625, 0.796875, 1.09375, 3.59375, 0.578125, -0.046875, 0.140625, 0.1015625, -0.1953125, -0.015625, -0.109375, 0.2890625, -0.0078125, -0.234375, 0.03125, 2.96875, 27.578125, 98.99219, 126.14844, 183.63281, 261.22656, 319.10156, 409.4922, 386.6797, 374.72656, 353.08594, 311.9453, 132.4375, 70.46875, 8.3828125, -0.0703125, 0.0703125, -0.2578125, 0.0546875, -0.1171875, 0.3671875, -0.2421875, -0.203125, 0.515625, .nan, .nan, 15.9765625, .nan, .nan, 175.58594, .nan, .nan, 411.35938, .nan, .nan, 272.71875, .nan, .nan, 40.820312, .nan, .nan, -0.0234375, .nan, .nan, -0.0859375, .nan, .nan, 0.0546875, .nan, .nan, 0.640625, .nan, .nan, 3.078125, .nan, .nan, 0.875, .nan, .nan, 1.484375, .nan, .nan, 0.0078125, .nan, .nan, -0.0546875, .nan, .nan, 0.140625, .nan, .nan, -0.0625, .nan, .nan, 1.9609375, .nan, .nan, 181.02344, .nan, .nan, 152.05469, .nan, .nan, 40.648438, .nan, .nan, 6.5390625, .nan, .nan, -0.0546875, .nan, .nan, -0.015625, .nan, .nan, 0.1875, .nan, .nan, 20.078125, .nan, .nan, 317.53125, .nan, .nan, 381.72656, .nan, .nan, 250.71094, .nan, .nan, 53.742188, .nan, .nan, -0.3359375, .nan, .nan, 0.171875, .nan, .nan, -0.0625, .nan, .nan, 43.609375, .nan, .nan, 191.8125], nLocations: 1, nTime: 181)
        let run = Timestamp(2022,08,16)
        let interpolationPositions = [79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178]
        
        // this location is exactly at a point where sofac is diverging to 0 on the first step to interpolate
        let coords = IconDomains.icon.grid.getCoordinates(gridpoint: 1256 + 2879 * 1132)
        data.interpolate2StepsSolarBackwards(positions: interpolationPositions, grid: RegularGrid(nx: 1, ny: 1, latMin: coords.lat, lonMin: coords.lon, dx: 1, dy: 1), run: run, dtSeconds: 3600)
        
        //print(data.data[79..<181])
        // first values should be very low
        XCTAssertEqual(data.data[79..<181], [0.36121312, 7.2542925, 30.724764, 69.46867, 125.831116, 208.59354, 287.19125, 362.26843, 409.80707, 381.25952, 314.05606, 221.34045, 134.82841, 59.11102, 7.843131, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.017096393, 0.36669967, 1.2415993, 2.1863375, 3.1238115, 3.6603706, 3.235137, 2.085593, 0.8714857, 0.8855745, 1.1891023, 1.2020452, 0.66142637, 0.18649474, 0.0013895009, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.097659454, -2.0908084, 3.8301601, 43.315594, 122.74638, 215.47948, 233.36154, 206.72093, 151.40663, 110.939835, 69.37869, 32.842438, 17.238323, 7.8894978, 1.0712075, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.27683523, 7.350494, 39.523895, 113.56923, 235.61891, 378.35043, 429.56946, 423.52747, 380.00476, 336.46512, 276.7991, 202.09793, 131.09357, 63.272217, 8.06389, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.8812442, 24.967127, 86.51872, 144.61661, 192.29332, 228.78392])
    }
    
    func testSolarInterpolationFrom3h2() {
        var data = Array2DFastTime(data: [.nan, 0.0, 0.0, 0.0, 0.0, 0.0, 5.4375, 100.109375, 287.32812, 495.59375, 545.4375, 751.3125, 821.90625, 577.8281, 194.17188, 215.09375, 202.40625, 188.3125, 71.328125, 1.4609375, 0.0859375, -0.0703125, 0.0078125, 0.1171875, -0.0546875, 0.0, -0.03125, -0.0390625, -0.0546875, 0.15625, 5.359375, 102.27344, 260.52344, 448.58594, 575.8047, 723.59375, 851.8594, 809.2578, 526.5703, 562.9844, 351.28125, 206.34375, 59.25, 1.2109375, -0.1171875, -0.0859375, 0.2890625, -0.125, 0.046875, 0.0390625, -0.2109375, 0.03125, -0.046875, 0.3203125, 5.3515625, 106.88281, 292.1953, 483.57812, 653.1094, 776.47656, 842.02344, 569.60156, 380.58594, 393.5078, 267.3047, 227.35938, 63.3125, 1.2109375, 0.3046875, 0.1953125, -0.1796875, -0.296875, 0.40625, -0.3203125, 0.3203125, 0.046875, -0.015625, -0.46875, 5.359375, .nan, .nan, 305.71875, .nan, .nan, 775.6719, .nan, .nan, 578.2344, .nan, .nan, 251.5625, .nan, .nan, 0.4140625, .nan, .nan, 0.0703125, .nan, .nan, 0.0546875, .nan, .nan, 1.3046875, .nan, .nan, 293.9375, .nan, .nan, 758.1094, .nan, .nan, 482.66406, .nan, .nan, 253.94531, .nan, .nan, -0.0390625, .nan, .nan, 0.0859375, .nan, .nan, 0.140625, .nan, .nan, 1.671875, .nan, .nan, 302.71875, .nan, .nan, 708.65625, .nan, .nan, 658.5703, .nan, .nan, 183.88281, .nan, .nan, 0.09375, .nan, .nan, 0.078125, .nan, .nan, -0.09375, .nan, .nan, 1.46875, .nan, .nan, 294.125, .nan, .nan, 760.5, .nan, .nan, 743.46875, .nan, .nan, 258.53125, .nan, .nan, 0.3671875, .nan, .nan, 0.1953125, .nan, .nan, -0.421875, .nan, .nan, 1.625, .nan, .nan, 302.41406, .nan, .nan, 776.85156], nLocations: 1, nTime: 181)
        let run = Timestamp(2022,08,16)
        let interpolationPositions = [79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178]
        
        // this position goes haywire if the time is wrong
        let coords = IconDomains.icon.grid.getCoordinates(gridpoint: 1460 + 2879 * 939)
        print(coords)
        data.interpolate2StepsSolarBackwards(positions: interpolationPositions, grid: RegularGrid(nx: 1, ny: 1, latMin: coords.lat, lonMin: coords.lon, dx: 1, dy: 1), run: run, dtSeconds: 3600)
        
        print(data.data[79..<181])
        // first value should be less than 123 watts
        XCTAssertEqual(data.data[79..<181], [71.10497, 218.62955, 443.50845, 624.7704, 765.5202, 837.62067, 795.01245, 670.6074, 511.96664, 399.9179, 276.26727, 118.96753, 6.0974555, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 3.9140623, 61.570637, 203.36154, 426.92502, 608.6587, 752.15656, 818.6287, 750.76385, 595.5492, 427.03336, 347.33743, 258.90567, 118.84851, 5.7438393, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 5.015625, 70.27684, 218.64377, 440.20447, 602.0751, 710.23944, 765.20184, 766.8835, 709.4929, 582.2317, 418.51932, 244.68257, 85.14204, 3.5085638, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 4.40625, 65.37945, 207.788, 428.22043, 602.02216, 734.3086, 821.1541, 834.6238, 780.1339, 656.7972, 496.4128, 312.5138, 118.396126, 4.6303287, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 4.875, 69.922264, 216.81995, 440.8182, 617.58417, 751.5133, 838.7799])
    }
}
